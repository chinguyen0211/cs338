import math

pRSA = 2406473480574953083222420532080342615562875413237878709728585368407894669844715001157859056678276147546345002941304742314487328096663451424864601034483700489865174366614434707954633043861812659812016213464998595541716401410123265138337110928723537761150862536130435794884364796467375062723585225185735917834543984696044860394565979894039570089532246599208463097233806733992559952506685329391222936786007981670589260021680936012241403577288938083513244801773796059
qRSA = 2050563635975133315631837892069950422716914946691502878174050580508513745767581208534013350219757063510884778606080111791210132710156485436357671177403467236352755872040145450093630329282882072035562605821872567526778658071967666022603896777375347749021765339403025861440887734537294407706520613733781869064873322465307115323212216927672483752107707166101217747211770870742037280664467745336615379853334157162635628289570643538697306105043474396898800081265309743
nRSA = 4934627010205510148380167397062166422911004053440468344966343904439283505908767916396949164584621586023618017552556031059367637008985902198304269520544327009163335560235930981652938203764734801779532174929836112000030370573908312903294453400687354613437401524041339810259260023668860385586710530238945071342080414811495032515010338573102951847070114493061303509441873572284374023452235760482117378509144798585578029204848568566551202252981025555520009256295697307633955670456383012217464281052184707057646820162585478777962897025559685484286731632462775539910534520650834847726066044610686469028681432108353392495945118989335430795872391641969449282015838649209809094287377210849685904858545821742819594510726800188527337815097997729414829633950052901687877035502891498094735997505487444237697854491695374889102097918854497884337348788463109777065246768044839446719677975747816147324934385638393699379133720961372555547702837
eRSA = 65537
dRSA = 3184839911464862112336303470725475919805448059148647787591534773791488986876559276862812697615092601822283517805789325140746941578132744727159833257243754578842345049771265219066420192301154350148323114197815094761391040397564334943368612996357381714743964625538254593502085546807840709668533530800111366520092732131416099078686960052567384183398259041877214639705393416855889839998514857208486822347373341632555342467715714073393392326420059187136813578937018852400587469568770834063763695854802841234200109174116272887751640311898323283724538765019628802266308007015635633273304890247518486658002011983146341416147613705920271254289621077354465545514872140857646930346079707544074163147909805493004550956620884158452713056573446583048612347548866707096404294214534603580540533006107069377358967980122336594175445514790533487231024520353675766008103101403108193943194693843703581339255119979969094603692799987113567782605817
coefficient = 1583331566246863409216121110676328738336452589848257677231185668928994021150784973893160114349862346065999169198858523177882454102895979172613573476145839193959462352957141859748635429338139262238656370140517041565367414797432348901215132613347057779892839837790536144642926447409513803948005101363316393248056303221599185797492220267091904057558173648096031193576974976814499630054650225492178162324942480196354430215997763003485396922475271010605822781004527710
# check n
if (pRSA*qRSA)-nRSA == 0:
    print("correct n, p, q.")
else:
    print("incorrect n.")

lambdaN = math.lcm(pRSA-1, qRSA-1)

if (eRSA*dRSA) % lambdaN == 1:
    print("correct public and private exponents.")
else:
    print("incorrect exponents.")

if (qRSA*coefficient) % pRSA == 1:
    print("correct q and qInverse.")
else:
    print("incorrect q and qInverse.")