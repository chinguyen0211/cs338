Author name: Chi Nguyen

1.
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZcbAsC2TWqsIOJVipSrV4IryGqnJiG0mzWQckuUBnF1Dmh7d76lfqT5Spos+wq+TgzDCIvbtHk6BjbMs9AoCxrHB6O8zPGEV3UhSavGbOd6/N38Sh+SE0QmysZhJaYW1shlYLemTDlH1qpY5OUPdDUdFdC3n6jPGehZiEujCygsLDpQSBAH+u3+HoexxSAf2G8If6UCC0uU98Ina+6IS+RXzDS9UIpQOXEOWjm6LpBBEBUEew0w1b6LxgD0dS6GyK236vI4UbGfZMgajW2xaflqvvLUJHPTCOlfYGCd35EaOgvD7lTp90r7jfXxjqPdo9alRP27A59Y+CIvPk5Yyx85//d2pyFJuAV6UpRuuMzjMJ2g76Sbj6T8f6zZIkpG/p35pCA2nC2yvjr6QzrC5/C7jXZbgCHONNWRAaE2rV4VHlAZrwNe1+fWU/wBW6vmiLPyozSuKElhmpGTH/JiREWdBsJI+qkilwXgxVLm7kxd85nuPV2Vqmz/yEBWua9jU= nguyenc@DESKTOP-A577PUL

-----BEGIN PUBLIC KEY-----
MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA2XGwLAtk1qrCDiVYqUq1
eCK8hqpyYhtJs1kHJLlAZxdQ5oe3e+pX6k+UqaLPsKvk4MwwiL27R5OgY2zLPQKA
saxwejvMzxhFd1IUmrxmznevzd/EofkhNEJsrGYSWmFtbIZWC3pkw5R9aqWOTlD3
Q1HRXQt5+ozxnoWYhLowsoLCw6UEgQB/rt/h6HscUgH9hvCH+lAgtLlPfCJ2vuiE
vkV8w0vVCKUDlxDlo5ui6QQRAVBHsNMNW+i8YA9HUuhsitt+ryOFGxn2TIGo1tsW
n5ar7y1CRz0wjpX2Bgnd+RGjoLw+5U6fdK+4318Y6j3aPWpUT9uwOfWPgiLz5OWM
sfOf/3dqchSbgFelKUbrjM4zCdoO+km4+k/H+s2SJKRv6d+aQgNpwtsr46+kM6wu
fwu412W4AhzjTVkQGhNq1eFR5QGa8DXtfn1lP8AVur5oiz8qM0rihJYZqRkx/yYk
RFnQbCSPqpIpcF4MVS5u5MXfOZ7j1dlaps/8hAVrmvY1AgMBAAE=
-----END PUBLIC KEY-----

========== PRIVATE KEY ==========
The items I expect to be contained in the file:
- Version number of the RSAPrivateKey (version)
- RSA modulus (modulus n)
- The RSA public exponent e (publicExponent)
- The RSA private exponent d (privateExponent)
- 2 primes chosen in RSA: p and q, both are prime factors of n (prime1 and prime2)
- d mod (p-1) and d mod (q-1) (exponent1 and exponent2)
- The Chinese Remainder Theorem coefficient q^(-1) mod p (coefficient)
- Additional primes r_3, ..., r_u in order, depending on the version (otherPrimeInfos) (but since this is version 0, I don't expect the file to contain additional primes information)

-----

The steps I took to decode the private key file is just copy-pasting it into the decoder. Alternatively, I also use the command openssl rsa -in id_rsa_homework -noout -text
- Name of integer: version. This specifies the version number.
	+ Value: 0
	+ Offset: 4
	+ DER encoding: 02 01 00
		* 02 is the type tag indicating INTEGER.
		* 01 is the length in octets of the value that follows (in this case the length is 1, and the value that follows is 00).
		* 00 is the value (0) which is in line with the value recorded above.


- Name of integer: modulus. This is the RSA modulus n.
	+ Value: 4934627010205510148380167397062166422911004053440468344966343904439283505908767916396949164584621586023618017552556031059367637008985902198304269520544327009163335560235930981652938203764734801779532174929836112000030370573908312903294453400687354613437401524041339810259260023668860385586710530238945071342080414811495032515010338573102951847070114493061303509441873572284374023452235760482117378509144798585578029204848568566551202252981025555520009256295697307633955670456383012217464281052184707057646820162585478777962897025559685484286731632462775539910534520650834847726066044610686469028681432108353392495945118989335430795872391641969449282015838649209809094287377210849685904858545821742819594510726800188527337815097997729414829633950052901687877035502891498094735997505487444237697854491695374889102097918854497884337348788463109777065246768044839446719677975747816147324934385638393699379133720961372555547702837
	+ Offset: 7
	+ DER encoding: 02  82 01 81 00 D9 71 B0 2C
			0B 64 D6 AA C2 0E 25 58  A9 4A B5 78 22 BC 86 AA
			72 62 1B 49 B3 59 07 24  B9 40 67 17 50 E6 87 B7
			7B EA 57 EA 4F 94 A9 A2  CF B0 AB E4 E0 CC 30 88
			BD BB 47 93 A0 63 6C CB  3D 02 80 B1 AC 70 7A 3B
			… skipping 288 bytes …
			8F AA 92 29 70 5E 0C 55  2E 6E E4 C5 DF 39 9E E3
			D5 D9 5A A6 CF FC 84 05  6B 9A F6 35
		* 02 is the type tag indicating INTEGER.
		* 82 01 81 is the length in octets (385) of the value that follows.
		* The rest of the hexademical numbers represent the integer value.


- Name of integer: publicExponent. This is the RSA public exponent e.
	+ Value: 65537
	+ Offset: 396
	+ DER encoding: 02 03 01 00 01
		* 02: type tag INTEGER.
		* 03: length (3) of the value that follows.
		* 01 00 01: Value in hexadecimal (65537).


- Name of integer: privateExponent. This is the RSA private exponent d.
	+ Value: 3184839911464862112336303470725475919805448059148647787591534773791488986876559276862812697615092601822283517805789325140746941578132744727159833257243754578842345049771265219066420192301154350148323114197815094761391040397564334943368612996357381714743964625538254593502085546807840709668533530800111366520092732131416099078686960052567384183398259041877214639705393416855889839998514857208486822347373341632555342467715714073393392326420059187136813578937018852400587469568770834063763695854802841234200109174116272887751640311898323283724538765019628802266308007015635633273304890247518486658002011983146341416147613705920271254289621077354465545514872140857646930346079707544074163147909805493004550956620884158452713056573446583048612347548866707096404294214534603580540533006107069377358967980122336594175445514790533487231024520353675766008103101403108193943194693843703581339255119979969094603692799987113567782605817
	+ Offset: 401
	+ DER encoding: 02 82 01 81 00 8C 56  FD F7 4F 5B 43 D9 6D E9
			A7 5C F3 D6 8E 0C FD 8E  63 F3 FA 63 2B 6D 83 DD
			7F E8 C9 CF B1 39 B1 33  38 80 C9 EF 53 D2 9C 8E
			3C 76 22 49 CA 87 AC 36  DD 54 43 F0 6D 9F F0 32
			7B 73 28 EB 46 98 65 CD  2A 77 12 16 CF 79 76 2B
			… skipping 288 bytes …
			2F 18 7A 3B C7 C2 8A D0  AC D6 F8 07 5B 9C 4C D7
			87 16 3D 42 93 F9 
		* 02: type tag INTEGER.
		* 82 01 81: length (385) of the value that follows.
		* The rest of the hexademical numbers represent the integer value.


- Name of integer: prime1. This is prime p.
	+ Value: 2406473480574953083222420532080342615562875413237878709728585368407894669844715001157859056678276147546345002941304742314487328096663451424864601034483700489865174366614434707954633043861812659812016213464998595541716401410123265138337110928723537761150862536130435794884364796467375062723585225185735917834543984696044860394565979894039570089532246599208463097233806733992559952506685329391222936786007981670589260021680936012241403577288938083513244801773796059
	+ Offset: 790
	+ DER encoding: 02 81  C1 00 FF 97 9E A3 34 37
			B3 65 DB 05 C2 D2 63 7C  8D E9 DB E1 B5 0C 37 F2
			FE 6E CC A0 AC D7 94 04  01 D8 EB 45 3E 7D 7D E0
			77 FD 26 8C 89 DF 17 40  CB 8D C3 D6 57 01 9E 8E
			FD 8D CA 72 33 7F FA 31  4E AC AC 3A CE 5E D2 CE
			… skipping 96 bytes …
			92 A0 C8 02 87 43 B4 5E  B4 64 D2 3F A4 E1 11 A2
			40 4E 32 9A A6 37 50 36  FA DB 
		* 02: type tag INTEGER.
		* 81 C1: length (193) of the value of integer.
		* The rest of the hexademical numbers represent the integer value.


- Name of integer: prime2. This is prime q.
	+ Value: 2050563635975133315631837892069950422716914946691502878174050580508513745767581208534013350219757063510884778606080111791210132710156485436357671177403467236352755872040145450093630329282882072035562605821872567526778658071967666022603896777375347749021765339403025861440887734537294407706520613733781869064873322465307115323212216927672483752107707166101217747211770870742037280664467745336615379853334157162635628289570643538697306105043474396898800081265309743
	+ Offset: 986
	+ DER encoding: 02 81 C1 00 D9 CA
			7D 43 9A 75 30 CA 36 8E  D9 E4 F9 C5 30 BB E6 F8
			51 45 CE 5A 0C D3 14 A1  02 67 43 F2 A0 CA D6 67
			84 20 05 1D 34 9B C9 31  9E 4C 3A F3 A0 EF 76 79
			70 73 4C 38 46 D3 B6 42  F4 CA 48 8A 5B EE C3 63
			… skipping 96 bytes …
			5C 3E EA 55 50 1E 34 82  7D 32 3F 7C D0 CC 9E E6
			ED 12 BA 27 83 AE B0 12  A4 6E 45 D9 38 2F 
		* specs similar to prime1.

- Name of integer: exponent1. This is d mod (p-1)
	+ Value: 447534961643766546810425583181946317324264545776328878559775370708995227673945808232173980847381321792191478032998492444405016324246366876211144199586299976661683402967739295673452668547351460973020638871346001227740657954843559447427448738869378797212364200228233691930522271989019443436151436967876914820138579511961102255046312204534145295805713132294013278439440872696359624351915418688988283771729943094757799428479290295820654390649519772981055398385935065
	+ Offset: 1182
	+ DER encoding: 02 81
			C0 2F 88 66 FC 3B 0D D0  D3 34 74 51 D3 06 A5 77
			4E F2 91 7B 36 16 81 9E  47 C4 CE 6C D6 7A B4 74
			13 7F 4D 95 5D 89 37 61  99 36 BE 14 35 E5 01 2B
			D9 E5 7D CB 18 86 00 59  AF 30 E3 24 28 BC C2 C6
			BA DE 1C E1 9C 48 E0 02  72 3F 34 8C CB 0A 22 7B
			… skipping 96 bytes …
			9A E0 6E ED 9E DD C4 AA  E8 E0 08 5A B9 16 B5 E2
			D9
		* 02: type tag INTEGER.
		* 81 C0: length of 192.
		* The rest of the hexademical numbers represent the integer value.


- Name of integer: exponent2. This is d mod (q-1).
	+ Value: 1448476325798141839172685709988041638605014885364548792929024788654670420473387620243123945787470184753237101801880963352949965419289627794844775157341900182182804832998557966746029303505222128611537532598650665137017123102730841064595950339683146141770505281326940189962074199042823249620300979480166895745750424801393527271202318849652409521645394136861464125447025660163447729848495808514476896942646924205976071166476698231235074672732694565360529944338255477
	+ Offset: 1377
	+ DER encoding: 02 81 C1 00 99 D7 D5  80 69 9D 1A A7 DC BE 2F
			E0 F5 26 7B F4 5F 85 4D  33 B8 3E 18 0D 0A E7 69
			61 34 B8 31 28 D7 27 2C  47 CA 15 05 52 7E 5E 94
			69 58 C3 3C 0D AB 6C C1  28 50 D0 F8 07 19 1A 56
			FC 85 1D 67 2F 53 CA 28  A1 82 6E F1 FF ED 51 5C
			… skipping 96 bytes …
			C2 E1 E1 F3 44 77 82 BC  38 9C 52 C9 4C 1E 88 2C
			AA D0 A0 4E 75
		* similar specs to above, 81 C1 indicate integer value of length 193.

- Name of integer: coefficient. Inverse of q mod p by Chinese Remainder Theorem.
	+ Value:
1583331566246863409216121110676328738336452589848257677231185668928994021150784973893160114349862346065999169198858523177882454102895979172613573476145839193959462352957141859748635429338139262238656370140517041565367414797432348901215132613347057779892839837790536144642926447409513803948005101363316393248056303221599185797492220267091904057558173648096031193576974976814499630054650225492178162324942480196354430215997763003485396922475271010605822781004527710
	+ Offset: 1573
	+ DER encoding: 02 81 C1  00 A8 2A 86 A0 62 6E 62
			8F 34 C8 3C 4E 07 CB 9B  82 8B 30 A4 09 45 F1 62
			D8 68 5E 10 4F 97 9B AE  DC D3 B7 C3 D9 D7 4A 3F
			BF B9 54 6F 84 11 01 E6  49 DF 6B 8C 4C E4 BA 0C
			E4 F8 D6 24 03 1F F4 B3  99 6E C2 B7 2D 51 7F ED
			… skipping 96 bytes …
			E1 77 A6 CF 63 03 1D 72  24 9B 1E FB 41 C0 ED 2D
			FA BE 17 01 59 8A E5 38  5E
		* similar specs to above.

========== PUBLIC KEY ==========
The items I expect to be contained in the file:
- RSA modulus n (modulus)
- RSA public exponent e (publicExponent)

-----

The steps I took to decode this public key is to generate it from the private key by using the command
openssl rsa -in id_rsa_homework -pubout
and using the command
openssl rsa -in in_pub_homework -noout -text -pubin
- Name of integer: modulus
	+ Value: 4934627010205510148380167397062166422911004053440468344966343904439283505908767916396949164584621586023618017552556031059367637008985902198304269520544327009163335560235930981652938203764734801779532174929836112000030370573908312903294453400687354613437401524041339810259260023668860385586710530238945071342080414811495032515010338573102951847070114493061303509441873572284374023452235760482117378509144798585578029204848568566551202252981025555520009256295697307633955670456383012217464281052184707057646820162585478777962897025559685484286731632462775539910534520650834847726066044610686469028681432108353392495945118989335430795872391641969449282015838649209809094287377210849685904858545821742819594510726800188527337815097997729414829633950052901687877035502891498094735997505487444237697854491695374889102097918854497884337348788463109777065246768044839446719677975747816147324934385638393699379133720961372555547702837
	+ Offset: 28
	+ DER encoding: 02 82 01 81
			00 D9 71 B0 2C 0B 64 D6  AA C2 0E 25 58 A9 4A B5
			78 22 BC 86 AA 72 62 1B  49 B3 59 07 24 B9 40 67
			17 50 E6 87 B7 7B EA 57  EA 4F 94 A9 A2 CF B0 AB
			E4 E0 CC 30 88 BD BB 47  93 A0 63 6C CB 3D 02 80
			B1 AC 70 7A 3B CC CF 18  45 77 52 14 9A BC 66 CE
			… skipping 288 bytes …
			C5 DF 39 9E E3 D5 D9 5A  A6 CF FC 84 05 6B 9A F6
			35
		* 02: type tag INTEGER.
		* 82 01 81 (385): length of value of integer.
		* after that, it's the hexadecimal representation of the integer.

- Name of integer: publicExponent
	+ Value: 65537
	+ Offset: 417
	+ DER encoding: 02 03 01 00 01 
		* 02: type tag INTEGER.
		* 03: length of value.
		* 01 00 01: value of integer in hexadecimal representation.

========== SANITY CHECK ==========
code: rsa.py

import math

pRSA = 2406473480574953083222420532080342615562875413237878709728585368407894669844715001157859056678276147546345002941304742314487328096663451424864601034483700489865174366614434707954633043861812659812016213464998595541716401410123265138337110928723537761150862536130435794884364796467375062723585225185735917834543984696044860394565979894039570089532246599208463097233806733992559952506685329391222936786007981670589260021680936012241403577288938083513244801773796059
qRSA = 2050563635975133315631837892069950422716914946691502878174050580508513745767581208534013350219757063510884778606080111791210132710156485436357671177403467236352755872040145450093630329282882072035562605821872567526778658071967666022603896777375347749021765339403025861440887734537294407706520613733781869064873322465307115323212216927672483752107707166101217747211770870742037280664467745336615379853334157162635628289570643538697306105043474396898800081265309743
nRSA = 4934627010205510148380167397062166422911004053440468344966343904439283505908767916396949164584621586023618017552556031059367637008985902198304269520544327009163335560235930981652938203764734801779532174929836112000030370573908312903294453400687354613437401524041339810259260023668860385586710530238945071342080414811495032515010338573102951847070114493061303509441873572284374023452235760482117378509144798585578029204848568566551202252981025555520009256295697307633955670456383012217464281052184707057646820162585478777962897025559685484286731632462775539910534520650834847726066044610686469028681432108353392495945118989335430795872391641969449282015838649209809094287377210849685904858545821742819594510726800188527337815097997729414829633950052901687877035502891498094735997505487444237697854491695374889102097918854497884337348788463109777065246768044839446719677975747816147324934385638393699379133720961372555547702837
eRSA = 65537
dRSA = 3184839911464862112336303470725475919805448059148647787591534773791488986876559276862812697615092601822283517805789325140746941578132744727159833257243754578842345049771265219066420192301154350148323114197815094761391040397564334943368612996357381714743964625538254593502085546807840709668533530800111366520092732131416099078686960052567384183398259041877214639705393416855889839998514857208486822347373341632555342467715714073393392326420059187136813578937018852400587469568770834063763695854802841234200109174116272887751640311898323283724538765019628802266308007015635633273304890247518486658002011983146341416147613705920271254289621077354465545514872140857646930346079707544074163147909805493004550956620884158452713056573446583048612347548866707096404294214534603580540533006107069377358967980122336594175445514790533487231024520353675766008103101403108193943194693843703581339255119979969094603692799987113567782605817
coefficient = 1583331566246863409216121110676328738336452589848257677231185668928994021150784973893160114349862346065999169198858523177882454102895979172613573476145839193959462352957141859748635429338139262238656370140517041565367414797432348901215132613347057779892839837790536144642926447409513803948005101363316393248056303221599185797492220267091904057558173648096031193576974976814499630054650225492178162324942480196354430215997763003485396922475271010605822781004527710
# check n
if (pRSA*qRSA)-nRSA == 0:
    print("correct n, p, q.")
else:
    print("incorrect n.")

lambdaN = math.lcm(pRSA-1, qRSA-1)

if (eRSA*dRSA) % lambdaN == 1:
    print("correct public and private exponents.")
else:
    print("incorrect exponents.")

if (qRSA*coefficient) % pRSA == 1:
    print("correct q and qInverse.")
else:
    print("incorrect q and qInverse.")

---
output:
correct n, p, q.
correct public and private exponents.
correct q and qInverse.
